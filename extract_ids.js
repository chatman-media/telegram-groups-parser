import fs from "fs";

// -------- utils --------
function loadJSON(path, fallback = null) {
  try {
    if (!fs.existsSync(path)) return fallback;
    return JSON.parse(fs.readFileSync(path, "utf8"));
  } catch {
    return fallback;
  }
}

// -------- config --------
const cfg = {
  extract: {
    inputFile: "groups.json",
    outputFile: "group_ids.txt",
    includeUsernames: false, // –µ—Å–ª–∏ true, –¥–æ–±–∞–≤–∏—Ç @username –ø–æ—Å–ª–µ ID
  },
  ...loadJSON("config.json", {}),
};

// -------- extract IDs --------
function extractIds() {
  const { extract: { inputFile, outputFile, includeUsernames, minParticipants, filterByParticipants } } = cfg;

  if (!fs.existsSync(inputFile)) {
    console.error(`–§–∞–π–ª —Å –≥—Ä—É–ø–ø–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: ${inputFile}`);
    console.log("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ parse.js –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø");
    process.exit(1);
  }

  const groups = loadJSON(inputFile, []);
  
  if (!Array.isArray(groups) || groups.length === 0) {
    console.error(`–§–∞–π–ª ${inputFile} –ø—É—Å—Ç –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ`);
    process.exit(1);
  }

  console.log(`üìä –í—Å–µ–≥–æ –≥—Ä—É–ø–ø –≤ —Ñ–∞–π–ª–µ: ${groups.length}`);
  if (filterByParticipants) {
    console.log(`üéØ –§–∏–ª—å—Ç—Ä: –º–∏–Ω–∏–º—É–º ${minParticipants} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤`);
  }

  const ids = [];
  let withUsernames = 0;
  let withoutUsernames = 0;
  let filteredOut = 0;
  let noParticipantsData = 0;

  for (const group of groups) {
    if (!group.id) continue;

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    if (filterByParticipants) {
      if (group.participants_count === null || group.participants_count === undefined) {
        noParticipantsData++;
        continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≥—Ä—É–ø–ø—ã –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö
      }
      
      if (group.participants_count < minParticipants) {
        filteredOut++;
        continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≥—Ä—É–ø–ø—ã —Å –º–∞–ª—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
      }
    }

    let line = group.id;
    
    if (includeUsernames && group.username) {
      line += ` @${group.username}`;
      withUsernames++;
    } else if (!group.username) {
      withoutUsernames++;
    }

    ids.push(line);
  }

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª (–ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫—É)
  fs.writeFileSync(outputFile, ids.join('\n'), 'utf8');

  console.log(`\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
  console.log(`   ‚úÖ –ü—Ä–æ—à–ª–∏ —Ñ–∏–ª—å—Ç—Ä: ${ids.length}`);
  if (filterByParticipants) {
    console.log(`   ‚ùå –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ (< ${minParticipants}): ${filteredOut}`);
    console.log(`   ‚ö†Ô∏è –ë–µ–∑ –¥–∞–Ω–Ω—ã—Ö –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö: ${noParticipantsData}`);
  }
  if (includeUsernames) {
    console.log(`   üìù –° username: ${withUsernames}`);
    console.log(`   üìù –ë–µ–∑ username: ${withoutUsernames}`);
  }
  console.log(`üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤: ${outputFile}`);
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ ID –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
  if (ids.length > 0) {
    console.log(`\nüìã –ü–µ—Ä–≤—ã–µ ${Math.min(5, ids.length)} ID:`);
    ids.slice(0, 5).forEach((id, index) => {
      console.log(`   ${index + 1}. ${id}`);
    });
    
    if (ids.length > 5) {
      console.log(`   ... –∏ –µ—â–µ ${ids.length - 5} ID`);
    }
  } else {
    console.log(`\n‚ö†Ô∏è –ù–µ—Ç –≥—Ä—É–ø–ø, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –∫—Ä–∏—Ç–µ—Ä–∏—è–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏`);
  }
}

// -------- main --------
try {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
  if (process.argv.includes('--help') || process.argv.includes('-h')) {
    console.log(`
–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ ID –≥—Ä—É–ø–ø –∏–∑ JSON —Ñ–∞–π–ª–∞ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  node extract_ids.js                    # –ò–∑–≤–ª–µ—á—å ID —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
  node extract_ids.js --with-usernames   # –ò–∑–≤–ª–µ—á—å ID —Å username
  node extract_ids.js --no-filter        # –ò–∑–≤–ª–µ—á—å –≤—Å–µ ID –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
  node extract_ids.js --help             # –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤ config.json:
  "extract": {
    "inputFile": "groups.json",            # –í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª —Å –≥—Ä—É–ø–ø–∞–º–∏
    "outputFile": "group_ids.txt",         # –í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª —Å ID
    "includeUsernames": false,             # –í–∫–ª—é—á–∞—Ç—å –ª–∏ username
    "minParticipants": 1000,               # –ú–∏–Ω–∏–º—É–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    "filterByParticipants": true           # –í–∫–ª—é—á–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é
  }
`);
    process.exit(0);
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥–∏
  if (process.argv.includes('--with-usernames')) {
    cfg.extract.includeUsernames = true;
  }
  
  if (process.argv.includes('--no-filter')) {
    cfg.extract.filterByParticipants = false;
  }

  extractIds();
} catch (e) {
  console.error("–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:", e);
  process.exit(1);
}
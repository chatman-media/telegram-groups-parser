import { TelegramClient } from "telegram";
import { StringSession } from "telegram/sessions/index.js";
import { Api } from "telegram/tl/index.js";
import fs from "fs";
import { config as dotenv } from "dotenv";

dotenv();

// -------- utils --------
const sleep = (ms) => new Promise((r) => setTimeout(r, ms));

function loadJSON(path, fallback = null) {
  try {
    if (!fs.existsSync(path)) return fallback;
    return JSON.parse(fs.readFileSync(path, "utf8"));
  } catch {
    return fallback;
  }
}

// -------- config --------
const cfg = {
  sessionFile: "session.json",
  filter: {
    inputFile: "groups.json",
    outputFile: "filtered_groups.json",
    processedFile: "processed_filter.json",
    minParticipants: 1000,
  },
  throttle: {
    betweenRequestsMs: 1200,
    maxRetries: 3,
    retryBackoffMultiplier: 2,
    floodWaitCapSec: 900,
  },
  ...loadJSON("config.json", {}),
};

const apiId = Number(process.env.API_ID);
const apiHash = process.env.API_HASH;

if (!apiId || !apiHash) {
  console.error("–ó–∞–ø–æ–ª–Ω–∏ .env: API_ID, API_HASH");
  process.exit(1);
}

// –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–µ—Å—Å–∏—é
const sessionData = loadJSON(cfg.sessionFile, { session: "" });
const stringSession = new StringSession(sessionData.session || "");
const client = new TelegramClient(stringSession, apiId, apiHash, { connectionRetries: 5 });

// -------- safe invoke with flood/ratelimit handling --------
async function safeInvoke(fn, desc = "request") {
  const {
    throttle: { maxRetries, retryBackoffMultiplier, floodWaitCapSec, betweenRequestsMs },
  } = cfg;

  let attempt = 0;
  let backoff = 1000;

  while (attempt <= maxRetries) {
    try {
      if (betweenRequestsMs > 0) await sleep(betweenRequestsMs);
      return await fn();
    } catch (err) {
      attempt++;
      const msg = (err && (err.message || err.errorMessage)) || String(err);

      // FLOOD_WAIT_x
      const floodMatch = msg.match(/FLOOD_WAIT_(\d+)/i);
      if (floodMatch) {
        const sec = Math.min(Number(floodMatch[1]) || 0, cfg.throttle.floodWaitCapSec || 900);
        console.warn(`‚è≥ FLOOD_WAIT: –∂–¥—ë–º ${sec} —Å–µ–∫. (${desc})`);
        await sleep(sec * 1000);
        continue;
      }

      if (attempt <= maxRetries) {
        console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ "${msg}". –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ ${backoff} –º—Å. (${desc})`);
        await sleep(backoff);
        backoff *= retryBackoffMultiplier || 2;
        continue;
      }
      throw err;
    }
  }
}

// -------- filter groups by participants --------
async function filterGroups() {
  const { filter: { inputFile, outputFile, processedFile, minParticipants } } = cfg;

  if (!fs.existsSync(inputFile)) {
    console.error(`–§–∞–π–ª —Å –≥—Ä—É–ø–ø–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: ${inputFile}`);
    process.exit(1);
  }

  const allGroups = loadJSON(inputFile, []);
  const processedIds = new Set(loadJSON(processedFile, []));

  // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã
  const groupsToProcess = allGroups.filter(group => !processedIds.has(group.id));

  console.log(`üìä –í—Å–µ–≥–æ –≥—Ä—É–ø–ø: ${allGroups.length}`);
  console.log(`‚úÖ –£–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${processedIds.size}`);
  console.log(`‚è≥ –ö –æ–±—Ä–∞–±–æ—Ç–∫–µ: ${groupsToProcess.length}`);
  console.log(`üéØ –ú–∏–Ω–∏–º—É–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${minParticipants}`);

  if (groupsToProcess.length === 0) {
    console.log("‚úÖ –í—Å–µ –≥—Ä—É–ø–ø—ã —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!");
    return;
  }

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —É–∂–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã
  const filteredGroups = loadJSON(outputFile, []);
  const filteredMap = new Map();
  filteredGroups.forEach(group => filteredMap.set(group.id, group));

  let passedCount = 0;
  let rejectedCount = 0;
  let errorCount = 0;

  for (let i = 0; i < groupsToProcess.length; i++) {
    const group = groupsToProcess[i];
    console.log(`\n[${i + 1}/${groupsToProcess.length}] –ü—Ä–æ–≤–µ—Ä—è—é: "${group.title || group.username || group.id}"`);

    try {
      let participantsCount = 0;

      // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
      if (group.type === 'channel') {
        // –î–ª—è –∫–∞–Ω–∞–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º channels.GetFullChannel
        try {
          const fullInfo = await safeInvoke(
            () => client.invoke(new Api.channels.GetFullChannel({
              channel: new Api.InputChannel({
                channelId: BigInt(group.id),
                accessHash: BigInt(group.access_hash || 0)
              })
            })),
            `GetFullChannel(${group.title || group.id})`
          );
          participantsCount = fullInfo?.fullChat?.participantsCount || 0;
        } catch (channelErr) {
          console.log(`   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ: ${channelErr.message}`);
        }
      } else {
        // –î–ª—è –≥—Ä—É–ø–ø –∏—Å–ø–æ–ª—å–∑—É–µ–º messages.GetFullChat
        try {
          const fullInfo = await safeInvoke(
            () => client.invoke(new Api.messages.GetFullChat({
              chatId: BigInt(Math.abs(group.id))
            })),
            `GetFullChat(${group.title || group.id})`
          );
          participantsCount = fullInfo?.fullChat?.participantsCount || 0;
        } catch (groupErr) {
          console.log(`   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–ø–ø–µ: ${groupErr.message}`);
        }
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
      group.participants_count = participantsCount;

      if (participantsCount >= minParticipants) {
        filteredMap.set(group.id, group);
        passedCount++;
        console.log(`   ‚úÖ –ü–†–û–®–õ–ê: ${participantsCount} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤`);
      } else {
        rejectedCount++;
        console.log(`   ‚ùå –ù–ï –ü–†–û–®–õ–ê: ${participantsCount} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (< ${minParticipants})`);
      }

    } catch (err) {
      errorCount++;
      console.error(`   ‚õî –û—à–∏–±–∫–∞: ${err.message}`);
      // –ü—Ä–∏ –æ—à–∏–±–∫–µ –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ, –Ω–æ –æ—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é
    }

    // –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é
    processedIds.add(group.id);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã
    const currentFiltered = Array.from(filteredMap.values());
    fs.writeFileSync(outputFile, JSON.stringify(currentFiltered, null, 2), "utf8");
    fs.writeFileSync(processedFile, JSON.stringify(Array.from(processedIds), null, 2), "utf8");

    console.log(`   üíæ –ü—Ä–æ–≥—Ä–µ—Å—Å: ${currentFiltered.length} –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≥—Ä—É–ø–ø —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ`);
  }

  console.log(`\n‚úÖ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!`);
  console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
  console.log(`   ‚úÖ –ü—Ä–æ—à–ª–∏ —Ñ–∏–ª—å—Ç—Ä: ${passedCount}`);
  console.log(`   ‚ùå –ù–µ –ø—Ä–æ—à–ª–∏: ${rejectedCount}`);
  console.log(`   ‚õî –û—à–∏–±–∫–∏: ${errorCount}`);
  console.log(`   üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: ${outputFile}`);
}

// -------- reset progress function --------
function resetProgress() {
  const { filter: { processedFile } } = cfg;
  if (fs.existsSync(processedFile)) {
    fs.unlinkSync(processedFile);
    console.log(`üóëÔ∏è –ü—Ä–æ–≥—Ä–µ—Å—Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å–±—Ä–æ—à–µ–Ω. –£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª: ${processedFile}`);
  } else {
    console.log("üìù –§–∞–π–ª –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–µ—á–µ–≥–æ —Å–±—Ä–∞—Å—ã–≤–∞—Ç—å.");
  }
}

// -------- main --------
(async () => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
  if (process.argv.includes('--reset-progress')) {
    resetProgress();
    return;
  }

  await client.connect();
  console.log("‚úÖ –ü–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ Telegram");

  await filterGroups();
})().catch((e) => {
  console.error("–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:", e);
  process.exit(1);
});
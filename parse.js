import { TelegramClient } from "telegram";
import { StringSession } from "telegram/sessions/index.js";
import { Api } from "telegram/tl/index.js";
import fs from "fs";
import readline from "readline";
import { config as dotenv } from "dotenv";

dotenv();

// -------- utils --------
const sleep = (ms) => new Promise((r) => setTimeout(r, ms));

function ask(question, { silent = false } = {}) {
  return new Promise((resolve) => {
    const rl = readline.createInterface({ input: process.stdin, output: process.stdout });
    if (silent) {
      // –ø—Ä–æ—Å—Ç–æ–µ "–º—å—é—Ç" —ç—Ö–æ ‚Äî –Ω–µ –∫—Ä–∏–ø—Ç–æ-—Å–µ–∫—å—é—Ä, –Ω–æ –ª—É—á—à–µ, —á–µ–º –Ω–∏—á–µ–≥–æ
      const _writeToOutput = rl._writeToOutput;
      rl._writeToOutput = function (stringToWrite) {
        if (rl.stdoutMuted) return;
        _writeToOutput.call(rl, stringToWrite);
      };
      rl.stdoutMuted = true;
    }
    rl.question(question, (answer) => {
      rl.close();
      resolve(answer.trim());
    });
    if (silent) process.stdout.write(""); // —Å—Ç–∞—Ä—Ç –±–µ–∑ —ç—Ö–∞
  });
}

function loadJSON(path, fallback = null) {
  try {
    if (!fs.existsSync(path)) return fallback;
    return JSON.parse(fs.readFileSync(path, "utf8"));
  } catch {
    return fallback;
  }
}

// -------- config --------
const cfg = {
  sessionFile: "session.json",
  stringSession: "",
  search: {
    queriesFile: "queries.txt",
    limitPerQuery: 20,
    saveFile: "groups.json",
    processedQueriesFile: "processed_queries.json",
  },
  throttle: {
    betweenQueriesMs: 3000,
    betweenRequestsMs: 1200,
    maxRetries: 3,
    retryBackoffMultiplier: 2,
    floodWaitCapSec: 900, // 15 –º–∏–Ω—É—Ç
  },
  ...loadJSON("config.json", {}),
};

const apiId = Number(process.env.API_ID);
const apiHash = process.env.API_HASH;
const phoneNumber = process.env.PHONE_NUMBER;
if (!apiId || !apiHash || !phoneNumber) {
  console.error("–ó–∞–ø–æ–ª–Ω–∏ .env: API_ID, API_HASH, PHONE_NUMBER");
  process.exit(1);
}

// –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∞ StringSession
const fromEnv = process.env.STRING_SESSION || "";
const fromConfig = cfg.stringSession || "";
const fromFile = loadJSON(cfg.sessionFile, { session: "" })?.session || "";
const initialSessionStr = fromEnv || fromConfig || fromFile || "";

const stringSession = new StringSession(initialSessionStr);
const client = new TelegramClient(stringSession, apiId, apiHash, { connectionRetries: 5 });

// -------- auth/login with retry --------
async function ensureLoggedIn() {
  // –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å —Å—Ç—Ä–æ–∫–∞ —Å–µ—Å—Å–∏–∏ ‚Äî –ø—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
  if (initialSessionStr) {
    try {
      await client.connect();
      console.log("‚úÖ –ü–æ–¥–∫–ª—é—á–∏–ª—Å—è –ø–æ –≥–æ—Ç–æ–≤–æ–π StringSession.");
      // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º ‚Äî —Å–æ—Ö—Ä–∞–Ω–∏–º –∫–∞–∫ session.json
      fs.writeFileSync(cfg.sessionFile, JSON.stringify({ session: client.session.save() }, null, 2));
      return;
    } catch (e) {
      console.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –ø–æ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏, –ø–æ–ø—Ä–æ–±—É–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –ª–æ–≥–∏–Ω‚Ä¶", e?.message || e);
    }
  }

  // –ò–Ω–∞—á–µ ‚Äî –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –ª–æ–≥–∏–Ω —Å –∞–≤—Ç–æ–ø–æ–≤—Ç–æ—Ä–æ–º –∫–æ–¥–∞
  const maxCodeRetries = 5;
  const twoFAEnv = process.env.TG_2FA || null;

  let startOptions = {
    phoneNumber: async () => phoneNumber,
    phoneCode: async () => {
      const code = await ask("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ Telegram: ");
      if (!code) throw new Error("EMPTY_CODE");
      return code;
    },
    onError: (err) => console.error("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:", err),
  };

  // –î–æ–±–∞–≤–ª—è–µ–º password —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å 2FA –≤ env
  if (twoFAEnv) {
    startOptions.password = async () => twoFAEnv;
  }

  for (let attempt = 1; attempt <= maxCodeRetries; attempt++) {
    try {
      console.log(`üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è (–ø–æ–ø—ã—Ç–∫–∞ ${attempt}/${maxCodeRetries})`);
      await client.start(startOptions);

      console.log("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞.");
      fs.writeFileSync(cfg.sessionFile, JSON.stringify({ session: client.session.save() }, null, 2));
      console.log(`üíæ –°–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ ${cfg.sessionFile}`);
      return;
    } catch (err) {
      const msg = (err && (err.message || err.errorMessage)) || String(err);
      // –ï—Å–ª–∏ –Ω—É–∂–µ–Ω –ø–∞—Ä–æ–ª—å 2FA, –Ω–æ –º—ã –µ–≥–æ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª–∏
      if (/SESSION_PASSWORD_NEEDED|Password is empty|Account has 2FA enabled/i.test(msg)) {
        console.log("üîê –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–æ–ª—å 2FA");
        const pwd = await ask("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å 2FA: ", { silent: true });
        if (pwd) {
          // –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫—É —Å –ø–∞—Ä–æ–ª–µ–º
          startOptions.password = async () => pwd;
          continue;
        } else {
          console.error("‚õî –ü–∞—Ä–æ–ª—å 2FA –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è —ç—Ç–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞");
          throw new Error("2FA password required");
        }
      }

      // —Ç–∏–ø–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—à–∏–±–æ–∫ –∫–æ–¥–∞
      const codeInvalid =
        /PHONE_CODE_INVALID|PHONE_CODE_EXPIRED|CODE_INVALID|PHONE_CODE_EMPTY|EMPTY_CODE/i.test(
          msg
        );

      if (codeInvalid && attempt < maxCodeRetries) {
        console.warn("‚ùå –ö–æ–¥ –Ω–µ–≤–µ—Ä–Ω—ã–π/–∏—Å—Ç—ë–∫. –ü–æ–≤—Ç–æ—Ä–∏–º –≤–≤–æ–¥‚Ä¶");
        continue;
      }
      console.error("‚õî –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è:", msg);
      throw err;
    }
  }
}

// -------- safe invoke with flood/ratelimit handling --------
async function safeInvoke(fn, desc = "request") {
  const {
    throttle: { maxRetries, retryBackoffMultiplier, floodWaitCapSec, betweenRequestsMs },
  } = cfg;

  let attempt = 0;
  let backoff = 1000;

  while (attempt <= maxRetries) {
    try {
      if (betweenRequestsMs > 0) await sleep(betweenRequestsMs);
      return await fn();
    } catch (err) {
      attempt++;
      const msg = (err && (err.message || err.errorMessage)) || String(err);

      // FLOOD_WAIT_x
      const floodMatch = msg.match(/FLOOD_WAIT_(\d+)/i);
      if (floodMatch) {
        const sec = Math.min(Number(floodMatch[1]) || 0, cfg.throttle.floodWaitCapSec || 900);
        console.warn(`‚è≥ FLOOD_WAIT: –∂–¥—ë–º ${sec} —Å–µ–∫. (${desc})`);
        await sleep(sec * 1000);
        continue;
      }

      // –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞—Ç–∞-—Ü–µ–Ω—Ç—Ä–æ–≤ ‚Äî —Ä–µ–¥–∫–æ—Å—Ç—å, –Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–µ–º
      const migrateMatch = msg.match(/(PHONE_MIGRATE_|NETWORK_MIGRATE_|USER_MIGRATE_)(\d+)/i);
      if (migrateMatch) {
        console.warn(`üîÅ MIGRATE: ${migrateMatch[1]}${migrateMatch[2]} ‚Äî –ø–æ–≤—Ç–æ—Ä–∏–º –∑–∞–ø—Ä–æ—Å.`);
        await sleep(1500);
        continue;
      }

      if (attempt <= maxRetries) {
        console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ "${msg}". –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ ${backoff} –º—Å. (${desc})`);
        await sleep(backoff);
        backoff *= retryBackoffMultiplier || 2;
        continue;
      }
      throw err;
    }
  }
}

// -------- search logic --------
function sanitizeChat(chat) {
  // –£–Ω–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç
  const id = (chat?.id && chat.id.toString && chat.id.toString()) || String(chat?.id || "");
  const username = chat?.username || null;
  const title = chat?.title || null;

  // —Ç–∏–ø: –∫–∞–Ω–∞–ª/—Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞/–≥—Ä—É–ø–ø–∞
  let type = "group";
  try {
    if (chat?.megagroup) type = "supergroup";
    else if (chat?.broadcast) type = "channel";
  } catch { }
  const access_hash = chat?.accessHash || chat?.access_hash || null;

  return {
    id,
    title,
    username,
    type,
    access_hash,
    // participants_count —á–∞—Å—Ç–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–∑ –ø–æ–∏—Å–∫–∞; –æ—Å—Ç–∞–≤–ª—è–µ–º null
    participants_count: chat?.participantsCount || chat?.participants_count || null,
  };
}

async function searchByQueries() {
  const {
    search: { queriesFile, limitPerQuery, saveFile, processedQueriesFile },
    throttle: { betweenQueriesMs },
  } = cfg;

  if (!fs.existsSync(queriesFile)) {
    console.error(`–§–∞–π–ª —Å –∑–∞–ø—Ä–æ—Å–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: ${queriesFile}`);
    process.exit(1);
  }

  const allQueries = fs
    .readFileSync(queriesFile, "utf8")
    .split(/\r?\n/)
    .map((q) => q.trim())
    .filter(Boolean);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
  const processedQueries = new Set(loadJSON(processedQueriesFile, []));

  // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
  const queries = allQueries.filter(q => !processedQueries.has(q));

  console.log(`üîé –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: ${allQueries.length}`);
  console.log(`üìã –£–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${processedQueries.size}`);
  console.log(`‚è≥ –ö –æ–±—Ä–∞–±–æ—Ç–∫–µ: ${queries.length}`);

  if (queries.length === 0) {
    console.log("‚úÖ –í—Å–µ –∑–∞–ø—Ä–æ—Å—ã —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!");
    return;
  }

  const dedup = new Map(); // id -> entry
  const existing = loadJSON(saveFile, []);

  if (Array.isArray(existing)) {
    for (const row of existing) {
      if (row?.id) dedup.set(String(row.id), row);
    }
  }

  for (let i = 0; i < queries.length; i++) {
    const q = queries[i];
    console.log(`\n[${i + 1}/${queries.length}] –ò—â—É: "${q}"`);

    try {
      const res = await safeInvoke(
        () =>
          client.invoke(
            new Api.contacts.Search({
              q,
              limit: limitPerQuery,
            })
          ),
        `contacts.Search("${q}")`
      );

      const chats = Array.isArray(res?.chats) ? res.chats : [];
      console.log(` ‚Üí –Ω–∞–π–¥–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤: ${chats.length}`);

      let newItemsCount = 0;
      for (const chat of chats) {
        const item = sanitizeChat(chat);
        if (!item.id) continue;
        if (!dedup.has(item.id)) {
          dedup.set(item.id, item);
          newItemsCount++;
        }
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö
      processedQueries.add(q);

      // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å
      const arr = Array.from(dedup.values());
      fs.writeFileSync(saveFile, JSON.stringify(arr, null, 2), "utf8");
      fs.writeFileSync(processedQueriesFile, JSON.stringify(Array.from(processedQueries), null, 2), "utf8");

      console.log(` üíæ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${arr.length} —É–Ω–∏–∫. –≥—Ä—É–ø–ø/–∫–∞–Ω–∞–ª–æ–≤ (+${newItemsCount} –Ω–æ–≤—ã—Ö)`);
      console.log(` üìù –∑–∞–ø—Ä–æ—Å "${q}" –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π`);

    } catch (err) {
      console.error(`‚õî –û—à–∏–±–∫–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å–µ "${q}":`, err?.message || err);
      // –î–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –æ—Ç–º–µ—á–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Ü–∏–∫–ª–∏–≤–∞—Ç—å—Å—è
      processedQueries.add(q);
      fs.writeFileSync(processedQueriesFile, JSON.stringify(Array.from(processedQueries), null, 2), "utf8");
      console.log(` üìù –∑–∞–ø—Ä–æ—Å "${q}" –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π (—Å –æ—à–∏–±–∫–æ–π)`);
    }

    if (betweenQueriesMs > 0 && i < queries.length - 1) {
      await sleep(betweenQueriesMs);
    }
  }

  console.log("\n‚úÖ –ì–æ—Ç–æ–≤–æ.");
}

// -------- reset progress function --------
function resetProgress() {
  const { search: { processedQueriesFile } } = cfg;
  if (fs.existsSync(processedQueriesFile)) {
    fs.unlinkSync(processedQueriesFile);
    console.log(`üóëÔ∏è –ü—Ä–æ–≥—Ä–µ—Å—Å —Å–±—Ä–æ—à–µ–Ω. –£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª: ${processedQueriesFile}`);
  } else {
    console.log("üìù –§–∞–π–ª –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–µ—á–µ–≥–æ —Å–±—Ä–∞—Å—ã–≤–∞—Ç—å.");
  }
}

// -------- main --------
(async () => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
  if (process.argv.includes('--reset-progress')) {
    resetProgress();
    return;
  }

  await ensureLoggedIn();
  await searchByQueries();
})().catch((e) => {
  console.error("–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:", e);
  process.exit(1);
});

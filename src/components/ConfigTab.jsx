import React, { useState, useEffect } from 'react'

function ConfigTab() {
  const [config, setConfig] = useState(null)
  const [isLoading, setIsLoading] = useState(false)
  const [isSaving, setIsSaving] = useState(false)

  useEffect(() => {
    loadConfig()
  }, [])

  const loadConfig = async () => {
    setIsLoading(true)
    try {
      const response = await fetch('http://localhost:3001/api/config')
      if (response.ok) {
        const data = await response.json()
        setConfig(data)
      }
    } catch (error) {
      console.error('Error loading config:', error)
    } finally {
      setIsLoading(false)
    }
  }

  const saveConfig = async () => {
    setIsSaving(true)
    try {
      const response = await fetch('http://localhost:3001/api/config', {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(config)
      })
      if (response.ok) {
        alert('–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!')
      }
    } catch (error) {
      console.error('Error saving config:', error)
      alert('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏')
    } finally {
      setIsSaving(false)
    }
  }

  const updateConfig = (path, value) => {
    const newConfig = { ...config }
    const keys = path.split('.')
    let current = newConfig
    
    for (let i = 0; i < keys.length - 1; i++) {
      if (!current[keys[i]]) current[keys[i]] = {}
      current = current[keys[i]]
    }
    
    current[keys[keys.length - 1]] = value
    setConfig(newConfig)
  }

  if (isLoading) {
    return <div>–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...</div>
  }

  if (!config) {
    return <div>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é</div>
  }

  return (
    <div className="tab-content">
      <h2>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏</h2>

      {/* –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞ */}
      <div className="file-info">
        <h4>üîç –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞</h4>
        
        <div className="form-group">
          <label>–õ–∏–º–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–∞ –∑–∞–ø—Ä–æ—Å:</label>
          <input
            type="number"
            value={config.search?.limitPerQuery || 20}
            onChange={(e) => updateConfig('search.limitPerQuery', parseInt(e.target.value))}
            min="1"
            max="200"
          />
        </div>
      </div>

      {/* –î–≤—É—Ö—É—Ä–æ–≤–Ω–µ–≤—ã–π –ø–∞—Ä—Å–∏–Ω–≥ */}
      <div className="file-info">
        <h4>üîÑ –î–≤—É—Ö—É—Ä–æ–≤–Ω–µ–≤—ã–π –ø–∞—Ä—Å–∏–Ω–≥</h4>
        
        <div className="form-group">
          <label>
            <input
              type="checkbox"
              checked={config.search?.twoLevelParsing?.enabled || false}
              onChange={(e) => updateConfig('search.twoLevelParsing.enabled', e.target.checked)}
            />
            –í–∫–ª—é—á–∏—Ç—å –¥–≤—É—Ö—É—Ä–æ–≤–Ω–µ–≤—ã–π –ø–∞—Ä—Å–∏–Ω–≥
          </label>
        </div>

        {config.search?.twoLevelParsing?.enabled && (
          <>
            <div style={{ marginLeft: '20px', padding: '10px', background: '#f8f9fa', borderRadius: '4px' }}>
              <h5>üìä –ü–µ—Ä–≤—ã–π —É—Ä–æ–≤–µ–Ω—å (–≤—ã—Å–æ–∫–∏–π –ª–∏–º–∏—Ç)</h5>
              
              <div className="form-group">
                <label>–õ–∏–º–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:</label>
                <input
                  type="number"
                  value={config.search?.twoLevelParsing?.firstLevel?.limitPerQuery || 100}
                  onChange={(e) => updateConfig('search.twoLevelParsing.firstLevel.limitPerQuery', parseInt(e.target.value))}
                  min="1"
                  max="200"
                />
              </div>

              <div className="form-group">
                <label>–ú–∞–∫—Å–∏–º—É–º —Å–ª–æ–≤ (–ø–µ—Ä–≤—ã–µ N —Å–ª–æ–≤):</label>
                <input
                  type="number"
                  value={config.search?.twoLevelParsing?.firstLevel?.maxWords || 30}
                  onChange={(e) => updateConfig('search.twoLevelParsing.firstLevel.maxWords', parseInt(e.target.value))}
                  min="1"
                  max="1000"
                />
              </div>
            </div>

            <div style={{ marginLeft: '20px', padding: '10px', background: '#f0f8ff', borderRadius: '4px', marginTop: '10px' }}>
              <h5>üìã –í—Ç–æ—Ä–æ–π —É—Ä–æ–≤–µ–Ω—å (–æ–±—ã—á–Ω—ã–π –ª–∏–º–∏—Ç)</h5>
              
              <div className="form-group">
                <label>–õ–∏–º–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:</label>
                <input
                  type="number"
                  value={config.search?.twoLevelParsing?.secondLevel?.limitPerQuery || 20}
                  onChange={(e) => updateConfig('search.twoLevelParsing.secondLevel.limitPerQuery', parseInt(e.target.value))}
                  min="1"
                  max="200"
                />
              </div>

              <div className="form-group">
                <label>
                  <input
                    type="checkbox"
                    checked={config.search?.twoLevelParsing?.secondLevel?.useAllWords || true}
                    onChange={(e) => updateConfig('search.twoLevelParsing.secondLevel.useAllWords', e.target.checked)}
                  />
                  –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ —Å–ª–æ–≤–∞
                </label>
              </div>
            </div>
          </>
        )}
      </div>

      {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç—Ä–æ—Ç—Ç–ª–∏–Ω–≥–∞ */}
      <div className="file-info">
        <h4>‚è±Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–¥–µ—Ä–∂–µ–∫</h4>
        
        <div className="form-group">
          <label>–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ (–º—Å):</label>
          <input
            type="number"
            value={config.throttle?.betweenQueriesMs || 5000}
            onChange={(e) => updateConfig('throttle.betweenQueriesMs', parseInt(e.target.value))}
            min="1000"
            max="60000"
          />
        </div>

        <div className="form-group">
          <label>–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É API –∑–∞–ø—Ä–æ—Å–∞–º–∏ (–º—Å):</label>
          <input
            type="number"
            value={config.throttle?.betweenRequestsMs || 1200}
            onChange={(e) => updateConfig('throttle.betweenRequestsMs', parseInt(e.target.value))}
            min="100"
            max="10000"
          />
        </div>
      </div>

      {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è */}
      <div className="file-info">
        <h4>üì§ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è ID</h4>
        
        <div className="form-group">
          <label>–ú–∏–Ω–∏–º—É–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:</label>
          <input
            type="number"
            value={config.extract?.minParticipants || 600}
            onChange={(e) => updateConfig('extract.minParticipants', parseInt(e.target.value))}
            min="0"
            max="100000"
          />
        </div>

        <div className="form-group">
          <label>
            <input
              type="checkbox"
              checked={config.extract?.filterByParticipants || true}
              onChange={(e) => updateConfig('extract.filterByParticipants', e.target.checked)}
            />
            –§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
          </label>
        </div>
      </div>

      <div style={{ marginTop: '20px' }}>
        <button
          className="button"
          onClick={saveConfig}
          disabled={isSaving}
        >
          {isSaving ? 'üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : 'üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é'}
        </button>
        
        <button
          className="button"
          onClick={loadConfig}
          disabled={isLoading}
          style={{ marginLeft: '10px' }}
        >
          üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å
        </button>
      </div>
    </div>
  )
}

export default ConfigTab
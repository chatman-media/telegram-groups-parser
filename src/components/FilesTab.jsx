import React, { useState, useEffect } from 'react'

function FilesTab({ setLogs }) {
  const [files, setFiles] = useState({})
  const [selectedFile, setSelectedFile] = useState('queries.txt')
  const [fileContent, setFileContent] = useState('')
  const [isLoading, setIsLoading] = useState(false)

  const fileDescriptions = {
    'queries.txt': '–ü–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞',
    'cities.txt': '–°–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è —Ä–µ–∂–∏–º–∞ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π',
    'words.txt': '–°–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –¥–ª—è —Ä–µ–∂–∏–º–∞ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π',
    'groups.json': '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞—Ä—Å–∏–Ω–≥–∞ (—Ç–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏–µ)',
    'group_ids.txt': '–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ ID –≥—Ä—É–ø–ø (—Ç–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏–µ)',
    'config.json': '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞',
    '.env': '–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (API –∫–ª—é—á–∏)'
  }

  useEffect(() => {
    loadFilesList()
  }, [])

  useEffect(() => {
    if (selectedFile) {
      loadFileContent(selectedFile)
    }
  }, [selectedFile])

  const loadFilesList = async () => {
    try {
      const response = await fetch('http://localhost:3001/api/files')
      const data = await response.json()
      setFiles(data.files)
    } catch (error) {
      console.error('Error loading files:', error)
    }
  }

  const loadFileContent = async (filename) => {
    setIsLoading(true)
    try {
      const response = await fetch(`http://localhost:3001/api/files/${filename}`)
      if (response.ok) {
        const data = await response.json()
        setFileContent(data.content)
      } else {
        setFileContent('–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —á—Ç–µ–Ω–∏—è')
      }
    } catch (error) {
      console.error('Error loading file content:', error)
      setFileContent('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞')
    } finally {
      setIsLoading(false)
    }
  }

  const saveFileContent = async () => {
    if (!selectedFile || isReadOnlyFile(selectedFile)) return
    
    setIsLoading(true)
    try {
      const response = await fetch(`http://localhost:3001/api/files/${selectedFile}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ content: fileContent })
      })
      
      if (response.ok) {
        setLogs(prev => prev + `‚úÖ –§–∞–π–ª ${selectedFile} —Å–æ—Ö—Ä–∞–Ω–µ–Ω\n`)
        loadFilesList() // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–∞—Ö
      } else {
        throw new Error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞')
      }
    } catch (error) {
      console.error('Error saving file:', error)
      setLogs(prev => prev + `‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è ${selectedFile}: ${error.message}\n`)
    } finally {
      setIsLoading(false)
    }
  }

  const deduplicateFiles = async () => {
    setIsLoading(true)
    try {
      const response = await fetch('http://localhost:3001/api/deduplicate', {
        method: 'POST'
      })
      
      if (response.ok) {
        const result = await response.json()
        setLogs(prev => prev + `‚úÖ –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞:\n${result.message}\n`)
        loadFileContent(selectedFile) // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–∞–π–ª
        loadFilesList() // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–∞—Ö
      } else {
        throw new Error('–û—à–∏–±–∫–∞ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏')
      }
    } catch (error) {
      console.error('Error deduplicating:', error)
      setLogs(prev => prev + `‚ùå –û—à–∏–±–∫–∞ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏: ${error.message}\n`)
    } finally {
      setIsLoading(false)
    }
  }

  const isReadOnlyFile = (filename) => {
    return ['groups.json', 'group_ids.txt', 'processed_queries.json', 'session.json'].includes(filename)
  }

  const getFileStats = (filename) => {
    const fileInfo = files[filename]
    if (!fileInfo) return null
    
    return (
      <div style={{ fontSize: '12px', color: '#7f8c8d', marginTop: '5px' }}>
        –†–∞–∑–º–µ—Ä: {fileInfo.size} –±–∞–π—Ç | –ò–∑–º–µ–Ω–µ–Ω: {new Date(fileInfo.modified).toLocaleString()}
        {fileInfo.lines && ` | –°—Ç—Ä–æ–∫: ${fileInfo.lines}`}
      </div>
    )
  }

  return (
    <div>
      <h2>üìÅ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞–º–∏</h2>
      <p>–ü—Ä–æ—Å–º–æ—Ç—Ä –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏</p>

      <div style={{ marginBottom: '20px' }}>
        <button
          className="button"
          onClick={deduplicateFiles}
          disabled={isLoading}
        >
          üîÑ –£–¥–∞–ª–∏—Ç—å –¥—É–±–ª–∏
        </button>
        
        <button
          className="button"
          onClick={loadFilesList}
          disabled={isLoading}
        >
          üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫
        </button>
      </div>

      <div className="form-group">
        <label>–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª:</label>
        <select 
          value={selectedFile} 
          onChange={(e) => setSelectedFile(e.target.value)}
          disabled={isLoading}
        >
          {Object.keys(fileDescriptions).map(filename => (
            <option key={filename} value={filename}>
              {filename} {isReadOnlyFile(filename) ? '(—Ç–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏–µ)' : ''}
            </option>
          ))}
        </select>
        {fileDescriptions[selectedFile] && (
          <p style={{ fontSize: '14px', color: '#7f8c8d', marginTop: '5px' }}>
            {fileDescriptions[selectedFile]}
          </p>
        )}
        {getFileStats(selectedFile)}
      </div>

      <div className="form-group">
        <label>–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞:</label>
        <textarea
          value={fileContent}
          onChange={(e) => setFileContent(e.target.value)}
          disabled={isLoading || isReadOnlyFile(selectedFile)}
          placeholder={isLoading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : '–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞'}
          style={{ 
            minHeight: '300px',
            fontFamily: 'monospace',
            backgroundColor: isReadOnlyFile(selectedFile) ? '#f8f9fa' : 'white'
          }}
        />
      </div>

      {!isReadOnlyFile(selectedFile) && (
        <div style={{ marginBottom: '20px' }}>
          <button
            className="button success"
            onClick={saveFileContent}
            disabled={isLoading}
          >
            üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª
          </button>
        </div>
      )}

      <div className="file-info">
        <h4>üìù –§–æ—Ä–º–∞—Ç—ã —Ñ–∞–π–ª–æ–≤:</h4>
        <p><strong>queries.txt, cities.txt, words.txt:</strong> –ü–æ –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏ –Ω–∞ —Å—Ç—Ä–æ–∫—É</p>
        <p><strong>config.json:</strong> JSON –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è</p>
        <p><strong>.env:</strong> KEY=value —Ñ–æ—Ä–º–∞—Ç</p>
      </div>
    </div>
  )
}

export default FilesTab
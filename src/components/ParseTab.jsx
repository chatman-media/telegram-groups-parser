import React, { useState, useEffect } from 'react'

function ParseTab({ logs, setLogs, wsConnection }) {
  const [isRunning, setIsRunning] = useState(false)
  const [mode, setMode] = useState('normal')
  const [progress, setProgress] = useState({ current: 0, total: 0 })

  const startParsing = async (parseMode = 'normal') => {
    if (isRunning) return
    
    setIsRunning(true)
    setLogs('')
    
    try {
      const endpoint = parseMode === 'cities' ? '/api/parse-cities' : '/api/parse'
      const response = await fetch(`http://localhost:3001${endpoint}`, {
        method: 'POST'
      })
      
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`)
      }
      
      const result = await response.json()
      console.log('Parse result:', result)
    } catch (error) {
      console.error('Parse error:', error)
      setLogs(prev => prev + `‚ùå –û—à–∏–±–∫–∞: ${error.message}\n`)
    } finally {
      setIsRunning(false)
    }
  }

  const stopParsing = async () => {
    try {
      await fetch('http://localhost:3001/api/stop', { method: 'POST' })
    } catch (error) {
      console.error('Stop error:', error)
    }
  }

  const resetProgress = async () => {
    try {
      const response = await fetch('http://localhost:3001/api/reset-progress', {
        method: 'POST'
      })
      const result = await response.json()
      setLogs(prev => prev + `üóëÔ∏è ${result.message}\n`)
    } catch (error) {
      console.error('Reset error:', error)
      setLogs(prev => prev + `‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞: ${error.message}\n`)
    }
  }

  return (
    <div>
      <h2>üîç –ü–∞—Ä—Å–∏–Ω–≥ –≥—Ä—É–ø–ø Telegram</h2>
      <p>–ó–∞–ø—É—Å–∫ –ø–æ–∏—Å–∫–∞ –≥—Ä—É–ø–ø –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –∏–ª–∏ –∫–æ–º–±–∏–Ω–∞—Ü–∏—è–º –≥–æ—Ä–æ–¥–æ–≤</p>

      <div className="form-group">
        <label>–†–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞:</label>
        <select 
          value={mode} 
          onChange={(e) => setMode(e.target.value)}
          disabled={isRunning}
        >
          <option value="normal">–û–±—ã—á–Ω—ã–π (queries.txt)</option>
          <option value="cities">–ö–æ–º–±–∏–Ω–∞—Ü–∏–∏ –≥–æ—Ä–æ–¥–æ–≤ (cities.txt + words.txt)</option>
        </select>
      </div>

      <div style={{ marginBottom: '20px' }}>
        <button
          className="button"
          onClick={() => startParsing(mode)}
          disabled={isRunning}
        >
          {isRunning ? '‚è≥ –ü–∞—Ä—Å–∏–Ω–≥...' : '‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥'}
        </button>

        <button
          className="button danger"
          onClick={stopParsing}
          disabled={!isRunning}
        >
          ‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
        </button>

        <button
          className="button"
          onClick={resetProgress}
          disabled={isRunning}
        >
          üóëÔ∏è –°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
        </button>
      </div>

      {isRunning && (
        <div className="status running">
          ‚è≥ –ü–∞—Ä—Å–∏–Ω–≥ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è... –†–µ–∂–∏–º: {mode === 'cities' ? '–ö–æ–º–±–∏–Ω–∞—Ü–∏–∏ –≥–æ—Ä–æ–¥–æ–≤' : '–û–±—ã—á–Ω—ã–π'}
        </div>
      )}

      {progress.total > 0 && (
        <div>
          <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: '5px' }}>
            <span>–ü—Ä–æ–≥—Ä–µ—Å—Å: {progress.current} / {progress.total}</span>
            <span>{Math.round((progress.current / progress.total) * 100)}%</span>
          </div>
          <div className="progress-bar">
            <div 
              className="progress-fill" 
              style={{ width: `${(progress.current / progress.total) * 100}%` }}
            />
          </div>
        </div>
      )}

      <div className="file-info">
        <h4>üìù –§–∞–π–ª—ã –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞:</h4>
        <p><strong>–û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º:</strong> queries.txt - —Å–ø–∏—Å–æ–∫ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤</p>
        <p><strong>–†–µ–∂–∏–º –≥–æ—Ä–æ–¥–æ–≤:</strong> cities.txt + words.txt - –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏</p>
        <p><strong>–†–µ–∑—É–ª—å—Ç–∞—Ç:</strong> groups.json - –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã —Å –¥–∞–Ω–Ω—ã–º–∏</p>
      </div>

      {logs && (
        <div className="log-container">
          {logs}
        </div>
      )}
    </div>
  )
}

export default ParseTab
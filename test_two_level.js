// –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–≤—É—Ö—É—Ä–æ–≤–Ω–µ–≤–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
import fs from 'fs'

function loadJSON(path, fallback = null) {
  try {
    if (!fs.existsSync(path)) return fallback
    return JSON.parse(fs.readFileSync(path, "utf8"))
  } catch {
    return fallback
  }
}

function testTwoLevelParsing() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–≤—É—Ö—É—Ä–æ–≤–Ω–µ–≤–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞\n')

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
  const config = loadJSON('config.json', {})
  const twoLevelConfig = config.search?.twoLevelParsing

  if (!twoLevelConfig?.enabled) {
    console.log('‚ùå –î–≤—É—Ö—É—Ä–æ–≤–Ω–µ–≤—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏')
    return
  }

  console.log('‚úÖ –î–≤—É—Ö—É—Ä–æ–≤–Ω–µ–≤—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –≤–∫–ª—é—á–µ–Ω')
  console.log(`üìä –ü–µ—Ä–≤—ã–π —É—Ä–æ–≤–µ–Ω—å: –ª–∏–º–∏—Ç ${twoLevelConfig.firstLevel.limitPerQuery}, –º–∞–∫—Å–∏–º—É–º ${twoLevelConfig.firstLevel.maxWords} —Å–ª–æ–≤`)
  console.log(`üìã –í—Ç–æ—Ä–æ–π —É—Ä–æ–≤–µ–Ω—å: –ª–∏–º–∏—Ç ${twoLevelConfig.secondLevel.limitPerQuery}, –≤—Å–µ —Å–ª–æ–≤–∞: ${twoLevelConfig.secondLevel.useAllWords}`)

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã
  if (!fs.existsSync('cities.txt')) {
    console.log('‚ùå –§–∞–π–ª cities.txt –Ω–µ –Ω–∞–π–¥–µ–Ω')
    return
  }

  if (!fs.existsSync('words.txt')) {
    console.log('‚ùå –§–∞–π–ª words.txt –Ω–µ –Ω–∞–π–¥–µ–Ω')
    return
  }

  const cities = fs.readFileSync('cities.txt', 'utf8').split('\n').filter(Boolean)
  const words = fs.readFileSync('words.txt', 'utf8').split('\n').filter(Boolean)

  console.log(`\nüìç –ì–æ—Ä–æ–¥–æ–≤: ${cities.length}`)
  console.log(`üìù –°–ª–æ–≤: ${words.length}`)

  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
  const firstLevelWords = words.slice(0, twoLevelConfig.firstLevel.maxWords)
  const firstLevelCombinations = cities.length * firstLevelWords.length
  const secondLevelCombinations = twoLevelConfig.secondLevel.useAllWords ? 
    cities.length * words.length : 0

  console.log(`\nüîÑ –ü–µ—Ä–≤—ã–π —É—Ä–æ–≤–µ–Ω—å: ${firstLevelCombinations} –∫–æ–º–±–∏–Ω–∞—Ü–∏–π`)
  console.log(`   –°–ª–æ–≤–∞: ${firstLevelWords.slice(0, 5).join(', ')}${firstLevelWords.length > 5 ? '...' : ''}`)
  
  console.log(`üîÑ –í—Ç–æ—Ä–æ–π —É—Ä–æ–≤–µ–Ω—å: ${secondLevelCombinations} –∫–æ–º–±–∏–Ω–∞—Ü–∏–π`)
  console.log(`   –í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π: ${firstLevelCombinations + secondLevelCombinations}`)

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤
  console.log('\nüìã –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:')
  console.log('–ü–µ—Ä–≤—ã–π —É—Ä–æ–≤–µ–Ω—å (–≤—ã—Å–æ–∫–∏–π –ª–∏–º–∏—Ç):')
  for (let i = 0; i < Math.min(3, cities.length); i++) {
    for (let j = 0; j < Math.min(3, firstLevelWords.length); j++) {
      console.log(`  "${cities[i]} ${firstLevelWords[j]}" (–ª–∏–º–∏—Ç: ${twoLevelConfig.firstLevel.limitPerQuery})`)
    }
  }

  if (secondLevelCombinations > 0) {
    console.log('\n–í—Ç–æ—Ä–æ–π —É—Ä–æ–≤–µ–Ω—å (–æ–±—ã—á–Ω—ã–π –ª–∏–º–∏—Ç):')
    for (let i = 0; i < Math.min(3, cities.length); i++) {
      for (let j = 0; j < Math.min(3, words.length); j++) {
        console.log(`  "${cities[i]} ${words[j]}" (–ª–∏–º–∏—Ç: ${twoLevelConfig.secondLevel.limitPerQuery})`)
      }
    }
  }

  console.log('\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω')
}

testTwoLevelParsing()